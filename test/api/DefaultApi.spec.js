/*
 * Marqo
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Marqo);
  }
}(this, function(expect, Marqo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Marqo.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('addDocuments', function() {
        it('should call addDocuments successfully', function(done) {
          // TODO: uncomment, update parameter values for addDocuments call and complete the assertions
          /*
          var opts = {};

          instance.addDocuments(body, indexName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createIndex', function() {
        it('should call createIndex successfully', function(done) {
          // TODO: uncomment, update parameter values for createIndex call and complete the assertions
          /*
          var opts = {};

          instance.createIndex(indexName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDocuments', function() {
        it('should call deleteDocuments successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDocuments call and complete the assertions
          /*
          var opts = {};

          instance.deleteDocuments(body, indexName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteIndex', function() {
        it('should call deleteIndex successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteIndex call and complete the assertions
          /*

          instance.deleteIndex(indexName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCluster', function() {
        it('should call getCluster successfully', function(done) {
          // TODO: uncomment getCluster call and complete the assertions
          /*

          instance.getCluster(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocument', function() {
        it('should call getDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocument call and complete the assertions
          /*

          instance.getDocument(indexName, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIndexStats', function() {
        it('should call getIndexStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getIndexStats call and complete the assertions
          /*

          instance.getIndexStats(indexName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refreshIndex', function() {
        it('should call refreshIndex successfully', function(done) {
          // TODO: uncomment, update parameter values for refreshIndex call and complete the assertions
          /*

          instance.refreshIndex(indexName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('search', function() {
        it('should call search successfully', function(done) {
          // TODO: uncomment, update parameter values for search call and complete the assertions
          /*

          instance.search(body, indexName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
