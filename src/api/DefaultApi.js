/*
 * Marqo
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HTTPValidationError} from '../model/HTTPValidationError';
import {SearchQuery} from '../model/SearchQuery';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addDocuments operation.
     * @callback moduleapi/DefaultApi~addDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Documents
     * add_documents endpoint
     * @param {Array.<Object>} body 
     * @param {String} indexName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.refresh  (default to <.>)
     * @param {Number} opts.batchSize  (default to <.>)
     * @param {Number} opts.processes  (default to <.>)
     * @param {module:api/DefaultApi~addDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addDocuments(body, indexName, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocuments");
      }
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling addDocuments");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        'refresh': opts['refresh'],'batch_size': opts['batchSize'],'processes': opts['processes']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createIndex operation.
     * @callback moduleapi/DefaultApi~createIndexCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Index
     * @param {String} indexName 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/DefaultApi~createIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createIndex(indexName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling createIndex");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDocuments operation.
     * @callback moduleapi/DefaultApi~deleteDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Docs
     * @param {Array.<String>} body 
     * @param {String} indexName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.refresh  (default to <.>)
     * @param {module:api/DefaultApi~deleteDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteDocuments(body, indexName, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteDocuments");
      }
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling deleteDocuments");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        'refresh': opts['refresh']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}/documents/delete-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteIndex operation.
     * @callback moduleapi/DefaultApi~deleteIndexCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Index
     * @param {String} indexName 
     * @param {module:api/DefaultApi~deleteIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteIndex(indexName, callback) {
      
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling deleteIndex");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback moduleapi/DefaultApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Document By Id
     * @param {String} indexName 
     * @param {String} documentId 
     * @param {module:api/DefaultApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDocument(indexName, documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling getDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocument");
      }

      let pathParams = {
        'index_name': indexName,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}/documents/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIndexStats operation.
     * @callback moduleapi/DefaultApi~getIndexStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Index Stats
     * @param {String} indexName 
     * @param {module:api/DefaultApi~getIndexStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIndexStats(indexName, callback) {
      
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling getIndexStats");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the refreshIndex operation.
     * @callback moduleapi/DefaultApi~refreshIndexCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Index
     * @param {String} indexName 
     * @param {module:api/DefaultApi~refreshIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    refreshIndex(indexName, callback) {
      
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling refreshIndex");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rootGet operation.
     * @callback moduleapi/DefaultApi~rootGetCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Root
     * @param {module:api/DefaultApi~rootGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    rootGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the search operation.
     * @callback moduleapi/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * @param {module:model/SearchQuery} body 
     * @param {String} indexName 
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    search(body, indexName, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling search");
      }
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling search");
      }

      let pathParams = {
        'index_name': indexName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/indexes/{index_name}/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}